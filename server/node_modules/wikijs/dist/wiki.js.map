{"version":3,"sources":["../src/wiki.js"],"names":["wiki","defaultOptions","apiUrl","origin","res","query","redirects","length","apiOptions","prop","inprop","ppprop","titles","to","console","log","Object","assign","options","search","list","srsearch","srlimit","limit","map","article","title","random","rnnamespace","rnlimit","then","page","handleRedirect","keys","pages","id","Error","geoSearch","gsradius","radius","gscoord","lat","lon","geosearch","findById","pageids","pageid"],"mappings":"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","file":"wiki.js","sourcesContent":["'use strict';\n\nimport { pagination, api } from './util';\nimport wikiPage from './page';\n\n/**\n * @namespace\n * @constant\n * @property {string} apiUrl - URL of Wikipedia API\n * @property {string} origin - When accessing the API using a cross-domain AJAX\n * request (CORS), set this to the originating domain. This must be included in\n * any pre-flight request, and therefore must be part of the request URI (not\n * the POST body). This must match one of the origins in the Origin header\n * exactly, so it has to be set to something like https://en.wikipedia.org or\n * https://meta.wikimedia.org. If this parameter does not match the Origin\n * header, a 403 response will be returned. If this parameter matches the Origin\n * header and the origin is whitelisted, an Access-Control-Allow-Origin header\n * will be set.\n */\nconst defaultOptions = {\n\tapiUrl: 'http://en.wikipedia.org/w/api.php',\n\torigin: '*'\n};\n\n/**\n * wiki\n * @example\n * wiki({ apiUrl: 'http://fr.wikipedia.org/w/api.php' }).search(...);\n * @namespace Wiki\n * @param  {Object} options\n * @return {Object} - wiki (for chaining methods)\n*/\nexport default function wiki(options = {}) {\n\n\tif (this instanceof wiki) {\n\t\tconsole.log('Please do not use wikijs ^1.0.0 as a class. Please see the new README.'); // eslint-disable-line\n\t}\n\n\tconst apiOptions = Object.assign({}, defaultOptions, options);\n\n  function handleRedirect(res) {\n    if (res.query.redirects && res.query.redirects.length === 1) {\n      return api(apiOptions, {\n\t\t\t\tprop: 'info|pageprops',\n\t\t\t\tinprop: 'url',\n\t\t\t\tppprop: 'disambiguation',\n\t\t\t\ttitles: res.query.redirects[0].to\n\t\t\t});\n    }\n    return res;\n  }\n\n\t/**\n\t * Search articles\n\t * @example\n\t * wiki.search('star wars').then(data => console.log(data.results.length));\n\t * @example\n\t * wiki.search('star wars').then(data => {\n\t * \tdata.next().then(...);\n\t * });\n\t * @method Wiki#search\n\t * @param  {string} query - keyword query\n\t * @param  {Number} [limit] - limits the number of results\n\t * @return {Promise} - pagination promise with results and next page function\n\t */\n\tfunction search(query, limit = 50) {\n\t\treturn pagination(apiOptions, {\n\t\t\tlist: 'search',\n\t\t\tsrsearch: query,\n\t\t\tsrlimit: limit\n\t\t}, res => res.query.search.map(article => article.title));\n\t}\n\n\t/**\n\t * Random articles\n\t * @example\n\t * wiki.random(3).then(results => console.log(results[0]));\n\t * @method Wiki#random\n\t * @param  {Number} [limit] - limits the number of random articles\n\t * @return {Promise} - List of page titles\n\t */\n\tfunction random(limit = 1) {\n\t\treturn api(apiOptions, {\n\t\t\t\tlist: 'random',\n\t\t\t\trnnamespace: 0,\n\t\t\t\trnlimit: limit\n\t\t\t})\n\t\t\t.then(res => res.query.random.map(article => article.title));\n\t}\n\n\t/**\n\t * Get Page\n\t * @example\n\t * wiki.page('Batman').then(page => console.log(page.pageid));\n\t * @method Wiki#page\n\t * @param  {string} title - title of article\n\t * @return {Promise}\n\t */\n\tfunction page(title) {\n\t\treturn api(apiOptions, {\n\t\t\t\tprop: 'info|pageprops',\n\t\t\t\tinprop: 'url',\n\t\t\t\tppprop: 'disambiguation',\n\t\t\t\ttitles: title\n\t\t\t})\n      .then(handleRedirect)\n\t\t\t.then(res => {\n\t\t\t\tconst id = Object.keys(res.query.pages)[0];\n\t\t\t\tif (!id || id === '-1') {\n\t\t\t\t\tthrow new Error('No article found');\n\t\t\t\t}\n\t\t\t\treturn wikiPage(res.query.pages[id], apiOptions);\n\t\t\t});\n\t}\n\n\t/**\n\t * Get Page by PageId\n\t * @example\n\t * wiki.findById('Batman').then(page => console.log(page.title));\n\t * @method Wiki#findById\n\t * @param {integer} pageid, id of the page\n\t * @return {Promise}\n\t */\n\tfunction findById(pageid) {\n\t\treturn api(apiOptions, {\n\t\t\t\tprop: 'info|pageprops',\n\t\t\t\tinprop: 'url',\n\t\t\t\tppprop: 'disambiguation',\n\t\t\t\tpageids: pageid\n\t\t\t})\n\t\t.then(handleRedirect)\n\t\t\t.then(res => {\n\t\t\t\tconst id = Object.keys(res.query.pages)[0];\n\t\t\t\tif (!id || id === '-1') {\n\t\t\t\t\tthrow new Error('No article found');\n\t\t\t\t}\n\t\t\t\treturn wikiPage(res.query.pages[id], apiOptions);\n\t\t\t})\n\n\t}\n\n\t/**\n\t * Geographical Search\n\t * @example\n\t * wiki.geoSearch(32.329, -96.136).then(titles => console.log(titles.length));\n\t * @method Wiki#geoSearch\n\t * @param  {Number} lat - latitude\n\t * @param  {Number} lon - longitude\n\t * @param  {Number} [radius=1000] - search radius in kilometers (default: 1km)\n\t * @return {Promise} - List of page titles\n\t */\n\tfunction geoSearch(lat, lon, radius = 1000) {\n\t\treturn api(apiOptions, {\n\t\t\t\tlist: 'geosearch',\n\t\t\t\tgsradius: radius,\n\t\t\t\tgscoord: `${lat}|${lon}`\n\t\t\t})\n\t\t\t.then(res => res.query.geosearch.map(article => article.title));\n\t}\n\n\treturn {\n\t\tsearch,\n\t\trandom,\n\t\tpage,\n\t\tgeoSearch,\n\t\toptions,\n\t\tfindById\n\t};\n}\n"]}